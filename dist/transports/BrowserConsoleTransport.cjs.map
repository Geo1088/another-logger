{"version":3,"file":"BrowserConsoleTransport.cjs","sources":["../../src/transports/BrowserConsoleTransport.ts"],"sourcesContent":["import {Transport} from \"../models\";\n\nexport class BrowserConsoleTransport implements Transport {\n\tlevelCssCache = new Map<string, string>();\n\n\tconstructor ({\n\t\tlevelColors = {}\n\t}: {\n\t\t/**\n\t\t * A map of level names to colors used in the console. Colors can be\n\t\t * specified as 6-digit hex number literals, e.g. `0x0094FF`.\n\t\t */\n\t\tlevelColors?: Record<string, number>\n\t} = {}) {\n\t\t// Cache the CSS used for each level\n\t\tfor (let [levelName, color] of Object.entries(levelColors)) {\n\t\t\t// By setting the alpha of the color to 50% (0x7F), enough of the\n\t\t\t// background bleeds through that using the default text color of\n\t\t\t// the console is pretty much always readable. This also means the\n\t\t\t// styles will look good in both light and dark devtools themes.\n\t\t\tlet backgroundColor = `#${('000000' + color.toString(16)).slice(-6)}7F`;\n\t\t\tthis.levelCssCache.set(levelName, `\n\t\t\t\tbackground-color: ${backgroundColor};\n\t\t\t`);\n\t\t}\n\t}\n\n\tsendRaw (message: any[], level: string) {\n\t\tconst levelCss = this.levelCssCache.get(level) || '';\n\t\tconsole.log(\n\t\t\t// Initial section with CSS styling for the level name. We want some\n\t\t\t// horizontal padding around the level name in its little \"tag,\" but\n\t\t\t// we also want the tags to stand out if the log is copy-pasted or\n\t\t\t// saved to a file. We pad the sides of the level name with brackets\n\t\t\t// which we hide via CSS, leaving a visually clean interface in the\n\t\t\t// HTML console that magically turns into a bracketed level name\n\t\t\t// when saved/copied as plain text.\n\t\t\t`%c[%c${level}%c]`,\n\t\t\t// CSS style for the first hidden bracket\n\t\t\t`\n\t\t\t\t${levelCss}\n\t\t\t\tborder-top-left-radius: 3px;\n\t\t\t\tborder-bottom-left-radius: 3px;\n\t\t\t\tcolor: transparent;\n\t\t\t`,\n\t\t\t// CSS style for the level name\n\t\t\tlevelCss,\n\t\t\t// CSS style for the second hidden bracket\n\t\t\t`\n\t\t\t\t${levelCss}\n\t\t\t\tborder-top-right-radius: 3px;\n\t\t\t\tborder-bottom-right-radius: 3px;\n\t\t\t\tcolor: transparent;\n\t\t\t`,\n\t\t\t// The rest of the message will be unstyled\n\t\t\t// TODO: support parsing out `%c`s from the message and doing\n\t\t\t//       extra formatting to make the result equivalent to native\n\t\t\t...message,\n\t\t);\n\t}\n}\n"],"names":[],"mappings":";;;;MAEa,uBAAuB;IAGnC,YAAa,EACZ,WAAW,GAAG,EAAE,KAOb,EAAE;QAVN,kBAAa,GAAG,IAAI,GAAG,EAAkB,CAAC;;QAYzC,KAAK,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;;;;;YAK3D,IAAI,eAAe,GAAG,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YACxE,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,SAAS,EAAE;wBACb,eAAe;IACnC,CAAC,CAAC;SACH;KACD;IAED,OAAO,CAAE,OAAc,EAAE,KAAa;QACrC,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QACrD,OAAO,CAAC,GAAG;;;;;;;;QAQV,QAAQ,KAAK,KAAK;;QAElB;MACG,QAAQ;;;;IAIV;;QAED,QAAQ;;QAER;MACG,QAAQ;;;;IAIV;;;;QAID,GAAG,OAAO,CACV,CAAC;KACF;;;;;"}